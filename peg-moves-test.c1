/**************************************************************************/
/*              COPYRIGHT Carnegie Mellon University 2021                 */
/* Do not post this file or any derivative on a public site or repository */
/**************************************************************************/
/*
 * Peg solitaire test file for peg-moves.c1
 *
 * 15-122 Principles of Imperative Computation
 */

#use <args>
#use <conio>
#use <util>



// You are welcome to define additional helper functions for your tests


int main() {
  // Creating a board from file

  int[] B_init = alloc_array(int, 8*8);

  args_t args = args_parse();
  int argc = args->argc;
  if (argc == 0) {
    printf("Using English board as default\n");
    english_board(B_init);
  } else if (argc == 1) {
    read_board(args->argv[0], B_init, 8*8);
  }

  print_board(B_init);

  // Using B_init, test the functions you wrote in file peg-moves.c1


  // A sample test

  int[] B = alloc_array(int, 8*8);         // make a copy (B) of B_init
  for (int i = 0; i < 64; i++)
    B[i] = B_init[i];

  move test_move = new_move(3, 5, 3, 3);   // create a new move
  assert(row_start(test_move) == 3);       // check that row_start works
  /* YOUR TURN */                          // check that col_start works
  /* YOUR TURN */                          // check that row_end works
  /* YOUR TURN */                          // check that col_end works

  make_move(B, test_move);                 // make this move
  /* YOUR TURN */                          // print B to see the outcome
  /* YOUR TURN */                          // using asserts, check that B
                                           // has changed as expected

  undo_move(B, test_move);                 // undo this move
  /* YOUR TURN */                          // print B to see the outcome
  for (int i = 0; i < 64; i++)             // check that B has been restored
    assert(B[i] == B_init[i]);             // to B_init


  // WRITE MORE TESTS!!!
  // - make and undo several moves
  // - start from different boards
  // - ...



  // Test all_moves




  printf("All tests passed!\n");
  return 0;
}
